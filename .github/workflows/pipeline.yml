# Nome do Workflow
name: DevOpsLab Pipeline

# Evento que irá acionar a pipeline
on: 
  push:
    branches:
      - main

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7.11'

      - name: Install Requirements
        run:  pip install flask

      - name: Install Requirements
        run:  pip install flask pytest flask-wtf
              
      #- name: Unit Test
      #  run: python -m unittest -v test

      - name: Setup Python
        uses: actions/setup-python@v3.0.0
        #with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          #python-version: # optional, default is 3.x
          # Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv.
          #cache: # optional
          # The target architecture (x86, x64) of the Python interpreter.
          #architecture: # optional
          # Used to pull python distributions from actions/python-versions. Since there's a default, this is typically not supplied by the user.
          #token: # optional, default is ${{ github.token }}
          # Used to specify the path to dependency files. Supports wildcards or a list of file names for caching multiple dependencies.
          #cache-dependency-path: # optional

      - name: coverage erase
        run: coverage erase
        
      - name: coverage run
        run: coverage run test.py
        
      - name: coverage xml
        run: coverage xml -i


  Deploy:
    needs: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Autenticação do Heroku CLI via API TOKEN
      # https://devcenter.heroku.com/articles/authentication
      - name: Heroku Login
        run: | 
            cat > ~/.netrc <<EOF
              machine api.heroku.com
                login $HEROKU_EMAIL
                password $HEROKU_API_KEY
              machine git.heroku.com
                login $HEROKU_EMAIL
                password $HEROKU_API_KEY
            EOF
        env:
            HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
            HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

      # Adicionando o Repositório Remoto do Heroku para poder enviar o código da app
      - name: Add Heroku Remote
        run: heroku git:remote --app $HEROKU_APP_NAME
        env:
            HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}

      # Enviando o código da App para o Heroku fazer Deploy
      - name: Push to Heroku & Deploy
        run: git push heroku HEAD:main --force
