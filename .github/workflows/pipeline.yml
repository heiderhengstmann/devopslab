# Nome do Workflow
name: DevOpsLab Pipeline

# Evento que irá acionar a pipeline
on: 
  push:
    branches:
      - main

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7.11'

      - name: Install Requirements
        run:  pip install flask

      - name: Install Requirements
        run:  pip install flask pytest flask-wtf 
              
      #- name: Unit Test
      #  run: python -m unittest -v test

      - name: Install coverage
        run:  pip install coverage

      - name: coverage erase
        run: coverage erase
        
      - name: coverage run
        run: coverage run test.py --branch

      - name: coverage report
        run: coverage report

      - name: coverage xml
        run: coverage xml -i 

      - name: Sonar Scan
        # You may pin to the exact commit or the version.
        # uses: sijomc/sonarscan-action@5a3a0c0eacbe76ac7c3e3513696f7449f4f914a5
        uses: sijomc/sonarscan-action@1.1
        with:
          # SonarQube server URL
          host: https://sonarcloud.io/organizations/heiderhengstmann/
          # The project's unique key. Allowed characters are: letters, numbers, -, _, . and :, with at least one non-digit.
          projectKey: # optional, default is 
          # Name of the project that will be displayed on the web interface.
          projectName: devopslab
          # Login or authentication token of a SonarQube user
          login: heidermassu@gmail.com
          # Password that goes with the sonar.login username. This should be left blank if an authentication token is being used.
          password: L34ndr0.hdrblm
          # Sonar Scanner options for memory optimization
          scannerOptions: # optional

      - name: ls
        run: ls ${GITHUB_WORKSPACE}

      - name: cat
        run: cat /home/runner/work/devopslab/devopslab/coverage.xml
      



  Deploy:
    needs: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Autenticação do Heroku CLI via API TOKEN
      # https://devcenter.heroku.com/articles/authentication
      - name: Heroku Login
        run: | 
            cat > ~/.netrc <<EOF
              machine api.heroku.com
                login $HEROKU_EMAIL
                password $HEROKU_API_KEY
              machine git.heroku.com
                login $HEROKU_EMAIL
                password $HEROKU_API_KEY
            EOF
        env:
            HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
            HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

      # Adicionando o Repositório Remoto do Heroku para poder enviar o código da app
      - name: Add Heroku Remote
        run: heroku git:remote --app $HEROKU_APP_NAME
        env:
            HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}

      # Enviando o código da App para o Heroku fazer Deploy
      - name: Push to Heroku & Deploy
        run: git push heroku HEAD:main --force
